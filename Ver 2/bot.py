import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞
from search_alg import find_recipes

# # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     level=logging.INFO
# )

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
user_results = {}

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "üçΩÔ∏è –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ª—é–±–æ–π —Ä–µ—Ü–µ–ø—Ç.\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üëâ <i>¬´–°–ø–∞–≥–µ—Ç—Ç–∏ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏¬ª</i>\n"
        "üëâ <i>¬´–ü–∏—Ä–æ–≥ —Å –≤–∏—à–Ω–µ–π¬ª</i>\n\n"
        "üîç –Ø –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –ø–æ–∫–∞–∂—É –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await update.message.reply_text(welcome_text, parse_mode='HTML')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    user = update.effective_user
    user_id = update.effective_user.id

    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query} –æ—Ç {user.id} - {user.first_name} {user.last_name}, @{user.username}")
    results = find_recipes(query, top_n=5)

    if not results:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_results[user_id] = results
    await send_recipe(update, context, user_id, index=0)

# --- –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ ---
def paginate_text(text, max_length=4096):
    pages = []
    while len(text) > max_length:
        split_index = text.rfind('\n', 0, max_length)
        if split_index == -1:
            split_index = max_length
        pages.append(text[:split_index])
        text = text[split_index:]
    pages.append(text)
    return pages

# --- –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É ---
def parse_instructions(text):
    text = re.sub(r'\d+\.\s*', '', text)
    sentences = re.split(r'(?<=[.!?])\s+', text)
    sentences = [s.strip() for s in sentences if s.strip()]
    sentences = [s[0].upper() + s[1:] if s else '' for s in sentences]
    numbered = [f"{i+1}. {s}" for i, s in enumerate(sentences)]

    return numbered


# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ—Ü–µ–ø—Ç ---
async def send_recipe(update, context, user_id, index, page=0):
    results = user_results.get(user_id)
    if not results:
        await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    recipe = results[index]
    total = len(results)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º)
    ingredients = recipe['ingredients']
    try:
        cleaned = ingredients.strip().strip("[]").replace("‚Äò", "'").replace("‚Äô", "'")
        items = [item.strip().strip("'\"") for item in re.split(r",\s*(?=(?:[^']*'[^']*')*[^']*$)", cleaned)]
        ingredients_str = "\n".join([f"‚Ä¢ {item}" for item in items if item])
    except Exception as e:
        ingredients_str = ingredients

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Ç–µ–∫—Å—Ç ‚Üí —à–∞–≥–∏)
    instructions = recipe['instructions']
    try:
        steps = parse_instructions(instructions)
        instructions_str = "\n".join(steps)  # –≤—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", e)
        instructions_str = instructions

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    full_text = (
        f"üçΩÔ∏è <b>{recipe['name']}</b>\n\n"
        f"üßÇ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients_str}\n\n"
        f"üìù <b>–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å:</b>\n{instructions_str}"
    )

    # –î–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pages = paginate_text(full_text)
    current_page = min(page, len(pages) - 1)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    nav_buttons = []

    if index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_{index}"))
    nav_buttons.append(InlineKeyboardButton(f"{index + 1} –∏–∑ {total}", callback_data="noop"))
    if index < total - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_{index}"))

    keyboard.append(nav_buttons)

    if len(pages) > 1:
        nav_buttons2 = []
        if current_page > 0:
            nav_buttons2.append(InlineKeyboardButton("‚¨ÜÔ∏è", callback_data=f"page_prev_{index}_{current_page}"))
        nav_buttons2.append(InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {len(pages)}", callback_data="noop"))
        if current_page < len(pages) - 1:
            nav_buttons2.append(InlineKeyboardButton("‚¨áÔ∏è", callback_data=f"page_next_{index}_{current_page}"))
        keyboard.append(nav_buttons2)

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=pages[current_page], reply_markup=reply_markup, parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            text=pages[current_page], reply_markup=reply_markup, parse_mode='HTML'
        )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    data = query.data.split('_')

    if data[0] == 'page':
        direction, index, page = data[1], int(data[2]), int(data[3])
        new_page = page - 1 if direction == "prev" else page + 1
        await send_recipe(update, context, user_id, index, page=new_page)
    else:
        direction, index = data[0], int(data[1])
        new_index = index - 1 if direction == "prev" else index + 1
        if 0 <= new_index < len(user_results.get(user_id, [])):
            await send_recipe(update, context, user_id, new_index)
            
# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    application = ApplicationBuilder().token("–ò–ú–Ø_–¢–û–ö–ï–ù–ê").build()  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
